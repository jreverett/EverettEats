@page "/recipes"
@using EverettEats.Models
@using EverettEats.Services
@inject IRecipeService RecipeService

<div class="notebook-page recipes-page">
    <div class="page-header">
        <h1 class="page-title">All My Recipes üìñ</h1>
        <p class="intro-text">
            Here's every recipe I've collected over the years. From quick weeknight dinners 
            to special occasion treats!
        </p>
    </div>

    <div class="search-section">
        <h2 class="section-title">
            <span class="title-text">Find Something Delicious</span>
            <span class="pencil-underline"></span>
        </h2>
        
        <div class="search-wrapper">
            <input type="text" 
                   @bind="searchTerm" 
                   @bind:event="oninput"
                   @onkeyup="OnSearchChanged"
                   placeholder="Search by name, ingredient, or category..." 
                   class="search-input" />
            <span class="search-icon">üîç</span>
        </div>
    </div>

    @if (filteredRecipes.Any())
    {
        <div class="recipes-section">
            <div class="recipes-header">
                <h2 class="section-title">
                    <span class="title-text">Recipe Collection</span>
                    <span class="pencil-underline"></span>
                </h2>
                <p class="recipes-count">Found @filteredRecipes.Count recipes</p>
            </div>
            
            <div class="recipe-cards">
                @foreach (var recipe in filteredRecipes)
                {
                    <a href="/recipe/@recipe.Slug" class="recipe-card">
                        <div class="recipe-photo-wrapper">
                            @if (!string.IsNullOrEmpty(recipe.ImageUrl))
                            {
                                <img src="@recipe.ImageUrl" alt="@recipe.Title" class="recipe-photo" />
                            }
                            else
                            {
                                <div class="recipe-sketch">üç≥</div>
                            }
                            <div class="tape-decoration"></div>
                        </div>
                        
                        <div class="recipe-info">
                            <h3 class="recipe-name">@recipe.Title</h3>
                            <div class="recipe-meta">
                                <span class="cook-time">‚è±Ô∏è @recipe.CookTime</span>
                                <span class="difficulty">@GetDifficultyEmoji(recipe.Difficulty)</span>
                            </div>
                            <p class="recipe-note">@recipe.Description</p>
                        </div>
                        
                        <div class="coffee-ring coffee-ring-small"></div>
                    </a>
                }
            </div>
        </div>
    }
    else
    {
        <div class="empty-state">
            <p class="empty-message">
                @if (string.IsNullOrEmpty(searchTerm))
                {
                    <span>No recipes in the cookbook yet! üìù</span>
                }
                else
                {
                    <span>Hmm, couldn't find anything matching "@searchTerm". Try a different search? ü§î</span>
                }
            </p>
        </div>
    }
</div>

@code {
    private string searchTerm = "";
    private List<Recipe> allRecipes = new();
    private List<Recipe> filteredRecipes = new();

    protected override async Task OnInitializedAsync()
    {
        allRecipes = await RecipeService.GetAllRecipesAsync();
        filteredRecipes = allRecipes;
    }

    private void OnSearchChanged()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredRecipes = allRecipes;
        }
        else
        {
            filteredRecipes = allRecipes.Where(r =>
                r.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                r.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                r.Ingredients.Any(i => i.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                r.Category.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        StateHasChanged();
    }

    private string GetDifficultyEmoji(DifficultyLevel difficulty) => difficulty switch
    {
        DifficultyLevel.Easy => "üëå Easy",
        DifficultyLevel.Medium => "üëç Medium",
        DifficultyLevel.Hard => "üí™ Challenge",
        _ => "üëå Easy"
    };
}
