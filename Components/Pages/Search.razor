@page "/search"
@using EverettEats.Models
@using EverettEats.Services
@inject IRecipeService RecipeService

<h1>Search Recipes</h1>

<div class="search-controls">
	<input @bind="searchTerm" @bind:event="oninput" placeholder="Search recipes..." class="search-box" />
	<label>
		Page size:
		<select @bind="pageSize">
			@foreach (var size in pageSizeOptions)
			{
				<option value="@size">@size</option>
			}
		</select>
	</label>
</div>

<div class="recipe-list">
	@if (recipes.Count == 0)
	{
		<p>No recipes found.</p>
	}
	else
	{
		<ul>
			@foreach (var recipe in recipes)
			{
				<li>
					@if (!string.IsNullOrWhiteSpace(recipe.ImageUrl))
					{
						<img src="@recipe.ImageUrl" alt="@recipe.Title" loading="lazy" style="max-width:100px;max-height:100px;margin-right:1em;vertical-align:middle;" />
					}
					<b>@recipe.Title</b> - @recipe.Description
				</li>
			}
		</ul>
	}
</div>

<div class="pagination-controls">
	<button @onclick="PreviousPage" disabled="@(pageNumber == 1)">Previous</button>
	<span>Page @pageNumber of @totalPages</span>
	<button @onclick="NextPage" disabled="@(pageNumber == totalPages)">Next</button>
</div>

@code {
	private string searchTerm = string.Empty;
	private int pageNumber = 1;
	private int _pageSize = 10;
	private int pageSize
	{
		get => _pageSize;
		set
		{
			if (_pageSize != value)
			{
				_pageSize = value;
				pageNumber = 1;
				_ = LoadRecipesAsync();
			}
		}
	}
	private int totalPages = 1;
	private int totalCount = 0;
	private List<int> pageSizeOptions = new() { 10, 20, 50 };
	private List<Recipe> recipes = new();

	protected override async Task OnInitializedAsync()
	{
		await LoadRecipesAsync();
	}

	private async Task LoadRecipesAsync()
	{
		var result = await RecipeService.GetPaginatedRecipesAsync(pageNumber, pageSize, searchTerm);
		recipes = result.Recipes;
		totalCount = result.TotalCount;
		totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
		if (pageNumber > totalPages && totalPages > 0)
		{
			pageNumber = totalPages;
			await LoadRecipesAsync();
		}
		StateHasChanged();
	}

	// Removed OnPageSizeChanged: handled in pageSize setter

	private async Task PreviousPage()
	{
		if (pageNumber > 1)
		{
			pageNumber--;
			await LoadRecipesAsync();
		}
	}

	private async Task NextPage()
	{
		if (pageNumber < totalPages)
		{
			pageNumber++;
			await LoadRecipesAsync();
		}
	}

	private async Task OnSearchChanged(ChangeEventArgs e)
	{
		searchTerm = e.Value?.ToString() ?? string.Empty;
		pageNumber = 1;
		await LoadRecipesAsync();
	}

	private async Task OnSearchInput(ChangeEventArgs e)
	{
		searchTerm = e.Value?.ToString() ?? string.Empty;
		pageNumber = 1;
		await LoadRecipesAsync();
	}
}
