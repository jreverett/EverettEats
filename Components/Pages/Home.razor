
@page "/"
@using EverettEats.Models
@using EverettEats.Services
@inject IRecipeService RecipeService

<div class="notebook-page home-page">
    <div class="coffee-ring coffee-ring-hero"></div>
    
    <div class="welcome-section">
        <h1 class="page-title">Welcome to my kitchen! üëã</h1>
        <p class="intro-text">
            This is where I keep all my favorite recipes. Some are family classics, 
            others are happy accidents. Feel free to browse around!
        </p>
    </div>

    <div class="search-section">
        <h2 class="section-title">
            <span class="title-text">Quick Search</span>
            <span class="pencil-underline"></span>
        </h2>
        
        <div class="search-wrapper">
            <input type="text" 
                   @bind="searchTerm" 
                   @bind:event="oninput"
                   @onfocus="OnSearchFocus"
                   @onblur="OnSearchBlur"
                   placeholder="Try 'chocolate' or 'pasta'..." 
                   class="search-input @(isSearchFocused ? "focused" : "")" />
            <span class="search-icon">üîç</span>
        </div>
    </div>

    <div class="recent-recipes">
        <h2 class="section-title">
            <span class="title-text">Recent Additions</span>
            <span class="pencil-underline"></span>
        </h2>
        
        @if (recentRecipes.Any())
        {
            <div class="recipe-cards">
                @foreach (var recipe in recentRecipes)
                {
                    <a href="/recipe/@recipe.Slug" class="recipe-card">
                        <div class="recipe-photo-wrapper">
                            @if (!string.IsNullOrEmpty(recipe.ImageUrl))
                            {
                                <img src="@recipe.ImageUrl" alt="@recipe.Title" class="recipe-photo" />
                            }
                            else
                            {
                                <div class="recipe-sketch">üç≥</div>
                            }
                            <div class="tape-decoration"></div>
                        </div>
                        
                        <div class="recipe-info">
                            <h3 class="recipe-name">@recipe.Title</h3>
                            <div class="recipe-meta">
                                <span class="cook-time">‚è±Ô∏è @recipe.CookTime</span>
                                <span class="difficulty">@GetDifficultyEmoji(recipe.Difficulty)</span>
                            </div>
                            <p class="recipe-note">@recipe.Description</p>
                        </div>
                        
                        <div class="coffee-ring coffee-ring-small"></div>
                    </a>
                }
            </div>
            
            <div class="view-all-wrapper">
                <a href="/recipes" class="view-all-link">
                    See all recipes ‚Üí
                </a>
            </div>
        }
        else
        {
            <div class="empty-state">
                <p class="empty-message">No recipes yet! Time to start cooking... ü•ò</p>
            </div>
        }
    </div>
</div>

@code {
    private string searchTerm = "";
    private List<Recipe> recentRecipes = new();
    private bool isSearchFocused = false;

    protected override async Task OnInitializedAsync()
    {
        var allRecipes = await RecipeService.GetAllRecipesAsync();
        recentRecipes = allRecipes.Take(6).ToList();
    }

    private string GetDifficultyEmoji(DifficultyLevel difficulty) => difficulty switch
    {
        DifficultyLevel.Easy => "üëå Easy",
        DifficultyLevel.Medium => "üëç Medium",
        DifficultyLevel.Hard => "üí™ Challenge",
        _ => "üëå Easy"
    };
    
    private void OnSearchFocus()
    {
        isSearchFocused = true;
    }
    
    private void OnSearchBlur()
    {
        isSearchFocused = false;
    }
}
